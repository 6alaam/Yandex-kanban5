package Manager;

import resources.Epic;
import resources.Subtask;
import resources.Task;

import java.util.List;

public interface TaskManager {
    // данный метод присваивает новый айди с шагом +1.но в нем существует момент если задача в середине списка была удалена. то этот айди получается пропущен
    // в мейне создал пример такого момента
    int getNextID();

    // здесь мы создаем НОВЫЙ список со всем значениями хешмапы Тасков,
    List<Task> getAllTask();

    // тоже для епиков
    List<Task> getAllEpic();

    // тоже для саб тасков, тут как я понимаю именно весь список который создатся в этом классе
    List<Subtask> getAllSubtask();

    //а уже сабы выгружаем конкретного эпика
    List<Subtask> getEpicSubtask(Epic epic);

    //ну тут ясно удалили все из хешмапы
    void deleteAllTask();

    //удаление всех эпиков добавленно очистка сабтасков для того
    // что бы не оставалась хешмапа сабтасков со ссылками на удаленный обьект
    void deleteAllEpics();

    //очень интересный метод для удаления сабтасков
    void deleteAllSubtask();

    // тут ясно по айди найти задачу
    Task getTaskById(int id);

    // для эпиков
    Epic getEpicById(int id);

    Subtask getSubtaskById(int id);

    // тут много вопросов , 1. по факту получается если мы создаем задачу по полному конструктору где руками пишем айди
    // то когда этот метод добавляеет ее в мапу с новым адйди следующим по порядку.
    // второе тут и проявляется методика добавления задачи, если д этого какойто айди был удален
    // он не заполнится, а будет присвоен следующий порядковый номер
    //да по условию метод должен возвращать этот добавленный обьект, но на данном этапе это бессмысленно
    Task addTask(Task task);

    Epic addEpic(Epic epic);

    Subtask addSubtask(Subtask subtask);

    // здесь тоже возникает вопрос , по заданию параметр это новая версия обьекта,
    // получется странная логика, по факту этод метод не апдейта задачи
    // а помещение уже измененной задчи в хешмапу тасков.
    Task updateTask(Task task);

    //для эпиков
    Epic updateEpic(Epic epic);

    Subtask updateSubtask(Subtask subtask);

    // тут понятно удалил по айди
    Object deleteTaskByID(int id);

    void deleteEpicById(int id);

    // во всех методах связанных с сабтаском мы сначаала взаимодействуем с ХЕШМАПОЙ сабтасков (здесь удаляем)
    // а после работаем с листом привязанным к конкретному эпику
    void deleteSubtaskById(int id);

    // апдейт статуса еика, по условию статус епика равен нью или доне
    // если все сабтаски внутри имеют этот статус
    void updateEpicStatus(Epic epic);

    // этот метод сделал исключительно для тестов в мейне . делал через неqросетку
    void printTasks();

    // метод для печати эпиков с принадлежащим им сабтаскам
    void printEpicWithSubtasks(int epicId);

    List<Task> getHistory();

    void printHistory();

}
